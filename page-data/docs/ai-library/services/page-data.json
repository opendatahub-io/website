{"componentChunkName":"component---src-templates-create-pages-js","path":"/docs/ai-library/services","result":{"data":{"markdownRemark":{"html":"<h3>Requesting Predictions</h3>\n<p>The AI services each have a route to the Seldon service.  To create a prediction a <code>POST</code> request to the route under the path <code>/api/v0.1/predictions</code>.  For instance, the flake analysis route on a CRC cluster in the Project `odh' will look something like:</p>\n<pre><code>https://regrclassifier-odh.apps-crc.testing/api/v0.1/predictions\n</code></pre>\n<p>Models vary according to each service, but often, data is passed in through a field <code>strData</code> and parsed by the model accordingly.  Within this <code>strData</code> field, most models require the a list of key value pairs separated by commas.  For this reason, strData must have any other commas stripped out.  Two common keys are <code>model</code> and <code>data</code>.  A simple JSON body would look like:</p>\n<pre><code class=\"language-json\">{\"strData\":\"model=healthpredictor/model.pkl, data=66:150\"}\n</code></pre>\n<p>Putting that together in a curl command:</p>\n<pre><code class=\"language-bash\">curl 'https://regrclassifier-odh.apps-crc.testing/api/v0.1/predictions' \\\n  -X POST \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -d '{\"strData\":\"model=healthpredictor/model.pkl, data=66:150\"}'\n</code></pre>\n<p>Sample Output:</p>\n<pre><code class=\"language-json\">{\n  \"meta\": {\n    \"puid\": \"k8h9uir10qdbsmv1qigp2qnk5l\",\n    \"tags\": {},\n    \"routing\": {},\n    \"requestPath\": {\n      \"c-regrclassifier\": \"quay.io/opendatahub/regression_predict\"\n    },\n    \"metrics\": []\n  },\n  \"data\": {\n    \"names\": [],\n    \"tensor\": {\n      \"shape\": [\n        1\n      ],\n      \"values\": [\n        2.2885771963212247\n      ]\n    }\n  }\n}\n</code></pre>\n<h3>Service Documentation</h3>\n<p>As each service varies, please visit the documentation for the service and model.</p>\n<ul>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/anomaly_detection\">Anomaly Detection</a></li>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/association_rule_learning\">Association Rule Learning</a></li>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/correlation_analysis\">Correlation Analysis</a></li>\n<li>\n<p>Duplicate Bug Prediction</p>\n<ul>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/duplicate_bug_predict\">Predictions</a></li>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/duplicate_bug_train\">Training</a></li>\n</ul>\n</li>\n<li>\n<p>Flake Analysis</p>\n<ul>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/flakes_predict\">Prediction</a></li>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/flakes_train\">Training</a></li>\n</ul>\n</li>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/fraud_detection\">Fraud Detection</a></li>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/matrix_factorization\">Matrix Factorization</a></li>\n<li>\n<p><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/regression_predict\">Regression Analysis</a></p>\n<ul>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/regression_predict\">Prediction</a></li>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/regression_train\">Training</a></li>\n</ul>\n</li>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/sentiment_analysis\">Sentiment Analysis</a></li>\n<li><a href=\"https://gitlab.com/opendatahub/ai-library/tree/master/topic_model\">Topic Modeling</a></li>\n</ul>\n<p>{% include next-link.html label=\"Administration\" url=\"/docs/administration/installation-customization/customization.html\" %}</p>"}},"pageContext":{"permalink":"/docs/ai-library/services"}},"staticQueryHashes":["1804438722"]}